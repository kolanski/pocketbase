{
  "name": "create-order-api",
  "code": "// Create Order API Endpoint\nif ($request.method !== 'POST') {\n    return {\n        body: { error: 'Method not allowed' },\n        headers: { 'Content-Type': 'application/json' },\n        status: 405\n    };\n}\n\ntry {\n    const data = JSON.parse($request.body || '{}');\n    const { customer_email, items, notes } = data;\n    \n    if (!customer_email || !items || !Array.isArray(items) || items.length === 0) {\n        return {\n            body: { error: 'Missing required fields: customer_email, items' },\n            headers: { 'Content-Type': 'application/json' },\n            status: 400\n        };\n    }\n    \n    // Find or create customer\n    let customer;\n    try {\n        customer = $app.findFirstRecordByFilter('customers', `email = '${customer_email}'`);\n    } catch (e) {\n        // Customer doesn't exist, create a new one\n        const customerData = {\n            email: customer_email,\n            name: customer_email.split('@')[0], // Use email prefix as name\n            password: 'temppass123',\n            passwordConfirm: 'temppass123'\n        };\n        customer = $app.save('customers', customerData);\n    }\n    \n    // Calculate total amount\n    let total_amount = 0;\n    const processedItems = [];\n    \n    for (const item of items) {\n        const book = $app.findRecordById('books', item.book_id);\n        if (!book) {\n            return {\n                body: { error: `Book not found: ${item.book_id}` },\n                headers: { 'Content-Type': 'application/json' },\n                status: 404\n            };\n        }\n        \n        const quantity = parseInt(item.quantity) || 1;\n        if (book.stock < quantity) {\n            return {\n                body: { error: `Insufficient stock for book: ${book.title}` },\n                headers: { 'Content-Type': 'application/json' },\n                status: 400\n            };\n        }\n        \n        const itemTotal = book.price * quantity;\n        total_amount += itemTotal;\n        \n        processedItems.push({\n            book_id: book.id,\n            title: book.title,\n            price: book.price,\n            quantity: quantity,\n            total: itemTotal\n        });\n        \n        // Update book stock\n        $app.save('books', { id: book.id, stock: book.stock - quantity });\n    }\n    \n    // Create order\n    const orderData = {\n        customer: customer.id,\n        items: processedItems,\n        total_amount: total_amount,\n        status: 'pending',\n        notes: notes || ''\n    };\n    \n    const order = $app.save('orders', orderData);\n    \n    return {\n        body: {\n            success: true,\n            order_id: order.id,\n            total_amount: total_amount,\n            status: 'pending'\n        },\n        headers: { 'Content-Type': 'application/json' },\n        status: 201\n    };\n    \n} catch (error) {\n    return {\n        body: { error: error.message || 'Internal server error' },\n        headers: { 'Content-Type': 'application/json' },\n        status: 500\n    };\n}",
  "enabled": true,
  "timeout": 10000,
  "triggers": {
    "type": "http", 
    "method": "POST", 
    "path": "/api/orders"
  },
  "contentType": "application/json",
  "description": "API endpoint to create new orders"
}
